<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" creationComplete="init(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			//import com.flexUnitTests.TestHelper;
			import com.pubnub.PubNub;
			public var p:PubNub;
			public var config:Object;

			public function init(e:Event):void
			{
				config = {
					publish_key   : '<publish key goes here>',
					subscribe_key : '<subscribe key goes here>',
					secret_key    : '<sec-s>',
					origin        : 'pubsub.pubnub.com'
				}; 
				p = new PubNub(config);
				
			}
			
			// helpre method for test purposes
			private function grant(channel:String):void {
				p.grant({
					channel: channel,
					read: true,
					write: true,
					ttl: 360000
				}, init_grant_cb);
			}
			
			//
			//
			// CALLBACKS:
			public function init_grant_cb(message:Object):void {
				ExternalInterface.call('console.log', message);
			}
			public function publish_cb(data:Array):void {
				ExternalInterface.call('console.log', 'CB: Publish cb called');
			}
			
			public function subscribe_message_cb(message:Object, envelope:Object, channel:String, time:Number):void {
				ExternalInterface.call('console.log', 'NEW MESSAGE:');
				ExternalInterface.call('console.log', message);
			}
			
			public function subscribe_connected_cb(channel:String):void {
				ExternalInterface.call('console.log', 'CONNECTED to channel "' + channel + '"');
				
				if (channel === 'unsubscribe_test') {
					p.unsubscribe({channel: channel}, function(data:Object):void {
						ExternalInterface.call('console.log', 'CHANNEL test1 UNSUBSCRIBED:');
					});
				}
				
				p.publish({
					channel : channel,
					message : { "status" : "Hello world, " + channel }
				});
			}
			
			public function here_now_cb(message:Object):void {
				ExternalInterface.call('console.log', 'HERE NOW CALLBACK:');
				ExternalInterface.call('console.log', message);
			}
			
			public function grant_cb(message:Object):void {
				ExternalInterface.call('console.log', 'GRANT CALLBACK:');
				ExternalInterface.call('console.log', message);
			}
			
			public function audit_cb(message:Object):void {
				ExternalInterface.call('console.log', 'AUDIT CALLBACK:');
				ExternalInterface.call('console.log', message);
			}
			
			public function time_cb(message:Object):void {
				ExternalInterface.call('console.log', 'TIME CALLBACK:');
				ExternalInterface.call('console.log', message);
			}
			
			public function get_uuid(uuid:*):void {
				ExternalInterface.call('console.log', 'get_uuid CALLBACK:' + uuid);		
			}
			
			//
			//
			// TEST ACTIONS:
			private function publishTest ():void {
				p.publish({
					channel : "publish_test",
					message : { "data" : "Hi." }
				}, publish_cb);
			}
			
			private function subscribeTest ():void{
				p.subscribe({
					channel: ["publish_test"],
					message: subscribe_message_cb,
					connect: subscribe_connected_cb
				});
			}
			
			private function unSubscribeTest ():void{
				p.subscribe({
					channel: ["subscribe_test", 'unsubscribe_test', 'test2'],
					message: subscribe_message_cb,
					connect: subscribe_connected_cb
				});
			}
			
			private function historyTest ():void {
				for(var i:int=0; i<10; i++) {
					p.publish({channel: 'history_test', message: {counter: i}});
				}
				
				// need some timeout or just trying again after reload html page
				p.history({
					count    : 10,
					channel  : 'history_test',
					callback : function (message:Object):void {
						ExternalInterface.call('console.log', message);
					}
				});
			}
			
			private function replayTest ():void {
				/* OPEN RECEIVE SOCKET */
				p.subscribe({
					channel : 'history_test',
					message : function(data:Object):void { ExternalInterface.call('console.log', data); },
					connect : start_replay
				});
				
				/* START THE MOVIE STREAM */
				function start_replay():void {
					p.replay({
						source : 'replay_test',
						destination : 'history_test'
					});
				}
			}
			
			private function hereNowTest ():void {
				p.here_now({
					channel: 'common_test'
				}, here_now_cb);
			}
			
			private function grantTest ():void {
				// grant permissions for channels that are used by other buttons
				grant('publish_test');
				grant('subscribe_test');
				grant('unsubscribe_test');
				grant('replay_test');
				grant('history_test');
				grant('test2');
				grant('i2i');
				
				p.grant({
					channel: 'common_test',
					auth_key: 'my_authkey',
					read: true,
					write: true,
					ttl: 5
				}, grant_cb);
			}
			
			private function auditTest ():void {
				p.audit({
					channel: 'publish_test'
				}, audit_cb);
			}
			
			private function authTest ():void {
				p.auth('check_string');
			}
			
			private function timeTest ():void {
				p.time(function (msg:Number):void {
					ExternalInterface.call('console.log', msg);
				});
			}
			
			private function uuidTest ():void {
				p.set_uuid('some_uuid');
				p.get_uuid(get_uuid);
				p.uuid(get_uuid);
			} 
			
			var i1:PubNub = null;
			var i2:PubNub = null;
			
			private function i2iTest ():void {
				i1 = new PubNub(config);
				i2 = new PubNub(config);
				
				i1.subscribe({
					channel: 'i2i',
					message: function (message:Object, envelope:Object, channel:String, time:Number):void {
						ExternalInterface.call('console.log', message);
						i1.unsubscribe({channel: 'i2i'});
					},
					connect: function ():void {
						i2.publish({
							channel: 'i2i',
							message: 'hello from instance #1'
						});
					}
				});
			}
			
			// ----------------------------------------
			
			private function unitTest():void
			{
				/* var tt:RunTests = new RunTests();
				tt.runMe();
				trace(TestHelper.unitTest()); */
			}
			
		]]>
	</fx:Script>
<s:VGroup>
	<s:HGroup>
		<s:Button click="grantTest()" label="Grant"/>
		<s:Button click="publishTest()" label="Publish"/>
		<s:Button click="subscribeTest()" label="Subscribe"/>
		<s:Button click="unSubscribeTest()" label="Unsubscribe"/>
		<s:Button click="historyTest()" label="History"/>
		<s:Button click="replayTest()" label="Replay [skipped]"/>
		<s:Button click="hereNowTest()" label="Here Now"/>
		<s:Button click="auditTest()" label="Audit"/>
		<s:Button click="authTest()" label="Auth"/>
		<s:Button click="timeTest()" label="Time"/>
		<s:Button click="uuidTest()" label="uuid"/>
		<s:Button click="i2iTest()" label="instance2instance Test" />
	</s:HGroup>
</s:VGroup>
</s:Application>
