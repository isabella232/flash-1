<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:comp="components.*"
               xmlns:local="*" backgroundColor="0xcccccc"
               width="825" height="1046"
               creationComplete="init(event)">
    <fx:Style source="demoStyles.css"/>

    <fx:Script>
    <![CDATA[
        import com.pubnub.PubNub;
        import com.pubnub.PubNubSecure;

        import flashx.textLayout.elements.TextFlow;

        import mx.formatters.DateFormatter;
        import mx.utils.StringUtil;

        import spark.events.TextOperationEvent;
        import spark.utils.TextFlowUtil;

        [Bindable]
        public var p:PubNub;
        public var config:Object;
        public var CommonValues:Object;
        public var PAMValues:Object;
        private var consoleString:String;
        private var presenceString:String;
        private var historyString:String;
        private var flow:TextFlow;
        private var chromeColorStatusOff:String = "#cccccc";
        private var chromeColorStatusOn:String = "#ce7777";
        private const colorRed:String = "#ce7777";
        private var SOME_UUID:String = 'some_uuid';
        private var currentHeartbeat:int;
        private var currentHeartbeatInterval:int;
        private var currentChannel:String;
        public var isSsl:Boolean = false;

        private var statusNotConnected:String = "NOT CONNECTED - Press 'Subscribe' Button";
        private var statusConnecting:String = "Connecting...";
        private var statusConnected:String = "CONNECTED - Press 'Publish' Button";

        [Embed(source='../assets/Lock.png')]
        [Bindable]
        public var iconLock:Class;

        [Embed(source='../assets/unLock.png')]
        [Bindable]
        public var iconUnLock:Class;

        public function init(e:Event = null):void {

            Security.allowInsecureDomain("*");
            Security.allowDomain("*");
            getMessagesTextArea();

            consoleString = "";
            presenceString = "";
            historyString = "";

            channelTextInput.text = presenceChannelInput.text = "flash_channel";
            authKeyTextInput.text = 'x';
            originTextInput.text = 'pubsub.pubnub.com';
            publishKeyTextInput.text = 'demo';
            subscribeKeyTextInput.text = 'demo';

            pamSecretKeyTextInput.text = 'demo';
            pamAuthKeyTextInput.text = 'x';
            pamChannelTextInput.text = 'flash_channel';
            pamTtlTextInput.text = '15';

            btnSSL.setStyle("icon", iconUnLock);
            btnSSL.setStyle("chromeColor", chromeColorStatusOn);

            miscContainer.visible = miscContainer.includeInLayout = false;
            presenceContainer.visible = presenceContainer.includeInLayout = false;

            currentHeartbeat = 10;
            currentHeartbeatInterval = 3;
            channelTextInput.addEventListener(Event.CHANGE, doSubscribe);
            subscribe();
        }

        // Additional buttons:
        public function onSetUuid(uuid:*):void {
            appendStringToConsole(uuid);
        }

        private function time():void {
            p.time(function (msg:Number):void {
                appendObjectToConsole(String(msg));
            });
        }

        private function history():void {
            p.history({
                channel: channel_val(),
                callback: function (message:Array):void {
                    historyAppendText(message[0]);
                },
                error: appendErrorToConsole
            });
        }

        private function doUUID():void {
            p.uuid(onSetUuid);
        }

        private function doGetUUID():void {
            p.get_uuid(onSetUuid);
        }

        private function hereNowHandler():void {
            p.here_now({
                channel: presenceChannelCheckbox.selected ? presenceChannelInput.text : false,
                state: presenceStateCheckbox.selected,
                uuids: presenceUUIDsCheckbox.selected ? 1 : 0,
                callback: appendObjectToConsole,
                error: appendErrorToConsole
            });
        }

        private function whereNowHandler():void {
            p.where_now({
                uuid: presenceUUIDInput.text,
                callback: appendObjectToConsole,
                error: appendErrorToConsole
            });
        }

        private function clearLogHandler():void {
            consoleLog.text = "";
            consoleString = "";
        }

        private function clearPresenceHandler():void {
            presenceArea.text = "";
            presenceString = "";
        }

        private function clearHistoryHandler():void {
            historyArea.text = "";
            historyString = "";
        }

        private function publish():void {
            p.publish({
                channel: channel_val(),
                message: messagesTextArea.text,
                auth_key: authKeyTextInput.text.split(/\s+/).join(''),
                error: appendErrorToConsole
            }, appendObjectToConsole);
        }


        private function subscribe():void {
            unsubscribe();

            var publish_key:String = publishKeyTextInput.text.split(/\s+/).join(''),
                    auth_key:String = authKeyTextInput.text.split(/\s+/).join(''),
                    cipher_key:String = StringUtil.trim(cipherKeyTextInput.text),
                    subscribe_key:String = subscribeKeyTextInput.text.split(/\s+/).join(''),
                    secret_key:String = pamSecretKeyTextInput.text.split(/\s+/).join(''),
                    origin:String = originTextInput.text.split(/\s+/).join('');

            p = (cipher_key ? PubNubSecure.init : PubNub.init)({
                publish_key: publish_key,
                auth_key: auth_key,
                ssl: isSsl,
                cipher_key: cipher_key,
                secret_key: secret_key,
                subscribe_key: subscribe_key,
                origin: origin,
                uuid: uuid_val(),
                heartbeat: currentHeartbeat,
                heartbeat_interval: currentHeartbeatInterval
            });

            connecting();

            p.subscribe({
                backfill: false,
                noheresync: true,
                channel: channel_val(),
                message: function subscribeMessageHandler(message:Object, envelope:Object, channel:String, time:Number):void {
                    appendObjectToConsole(message);
                },
                presence: function subscribePresenceHandler(message:Object, here:*, channel:String, presenceChannel:String = null):void {
                    presenceAppend(message);
                },
                connect: function subscribeConnectHandler(channel:String):void {
                    unsubscribeButton.visible = true;
                    unsubscribeButton.enabled = true;
                    unsubscribeButton.includeInLayout = true;
                    subscribeButton.enabled = false;
                    subscribeButton.includeInLayout = false;
                    subscribeButton.visible = false;
                    connected();
                    updateHeartbeatValues();
                    appendStringToConsole(channel);
                },
                disconnect: appendObjectToConsole,
                error: function subscribeErrorHandler(e:Object):void {
                    unsubscribeButton.visible = true;
                    unsubscribeButton.enabled = true;
                    unsubscribeButton.includeInLayout = true;
                    subscribeButton.enabled = false;
                    subscribeButton.includeInLayout = false;
                    subscribeButton.visible = false;
                    appendErrorToConsole(e);
                }
            });
        }

        private function unsubscribe():void {
            if (unsubscribeButton.enabled === false) {
                return;
            }
            if (!p) {
                noP('unsubscribe');
                return;
            }

            p.unsubscribe({
                channel: currentChannel,
                callback: function (message:Object):void {
                    disconnected();
                    appendObjectToConsole(message);
                    subscribeButton.visible = true;
                    subscribeButton.includeInLayout = true;
                    subscribeButton.enabled = true;

                    unsubscribeButton.includeInLayout = false;
                    unsubscribeButton.enabled = false;
                    unsubscribeButton.visible = false;
                }
            });
        }

        // PAM buttons:
        private function grant():void {
            if (!p) {
                noP('grant');
                return;
            }
            var grantConfig:Object = {
                channel: pamChannelTextInput.text.toString(),
                auth_key: pamAuthKeyTextInput.text,
                read: pamReadCheckbox.selected,
                write: pamWriteCheckbox.selected,
                ttl: parseInt(pamTtlTextInput.text),
                error: appendErrorToConsole,
                callback: appendObjectToConsole
            };

            p.grant(grantConfig);

            if (pamPnpresCheckbox.selected) {
                grantConfig.channel += '-pnpres';
                p.grant(grantConfig);
            }
        }

        private function revoke():void {
            if (!p) {
                noP('revoke');
                return;
            }

            var revokeConfig:Object = {
                channel: pamChannelTextInput.text.toString(),
                auth_key: authKeyTextInput.text,
                callback: appendObjectToConsole,
                error: appendErrorToConsole
            };

            p.revoke(revokeConfig);

            if (pamPnpresCheckbox.selected) {
                revokeConfig.channel += '-pnpres';
                p.revoke(revokeConfig);
            }
        }

        private function audit():void {
            if (!p) {
                noP('audit');
                return;
            }

            p.audit({
                channel: channel_val(),
                auth_key: authKeyTextInput.text,
                callback: appendObjectToConsole,
                error: appendErrorToConsole
            });
        }

        private function stateClickHandler(event:MouseEvent):void {
            var state:Object = {};

            if (keyField1.text && valueField1.text) {
                state[keyField1.text] = valueField1.text;
            }

            if (keyField2.text && valueField2.text) {
                state[keyField2.text] = valueField2.text;
            }

            if (keyField3.text && valueField3.text) {
                state[keyField3.text] = valueField3.text;
            }

            p.state({
                channel: presenceChannelInput.text,
                state: state,
                callback: appendObjectToConsole,
                error: appendErrorToConsole
            });
        }

        private function updateHeartbeatValues():void {
            presenceHeartbeatInput.text = p.get_heartbeat().toString();
            presenceHeartbeatIntervalInput.text = p.get_heartbeat_interval().toString();
        }

        private function setCurrentUUIDHandler():void {
            presenceUUIDInput.text = p.get_uuid();
        }

        private function setHeartbeatHandler():void {
            currentHeartbeat = parseInt(presenceHeartbeatInput.text);
            p.set_heartbeat(currentHeartbeat);
            updateHeartbeatValues();
        }

        private function setHeartbeatIntervalHandler():void {
            currentHeartbeatInterval = parseInt(presenceHeartbeatIntervalInput.text);
            p.set_heartbeat_interval(currentHeartbeatInterval);
            updateHeartbeatValues();
        }

        private function getHeartbeatHandler():void {
            presenceHeartbeatInput.text = p.get_heartbeat().toString();
        }

        private function getHeartbeatIntervalHandler():void {
            presenceHeartbeatIntervalInput.text = p.get_heartbeat_interval().toString();
        }

        private function miscToggle():void {
            miscContainer.visible = miscContainer.includeInLayout = !miscContainer.visible;
            miscTab.setStyle("chromeColor", miscContainer.visible ? chromeColorStatusOff : chromeColorStatusOn);
        }

        private function presenceToggle():void {
            presenceContainer.visible = presenceContainer.includeInLayout = !presenceContainer.visible;
            presenceTab.setStyle("chromeColor", presenceContainer.visible ? chromeColorStatusOff : chromeColorStatusOn);
        }

        // Helpers:
        private function sslToggle():void {
            isSsl = !isSsl;
            btnSSL.setStyle("icon", isSsl ? iconLock : iconUnLock);
            btnSSL.setStyle("chromeColor", isSsl ? chromeColorStatusOff : chromeColorStatusOn);
            subscribe();
        }

        private function channel_val():String {
            if (presenceBindToSubscribeChannelCheckbox.selected) {
                presenceChannelInput.text = channelTextInput.text;
            }
            currentChannel = channelTextInput.text;
            return currentChannel;
        }

        private function uuid_val():String {
            return useDefaultUUIDCheckbox.selected ? p.uuid() : uuidInput.text;
        }

        private function channelChangedHandler():void {
            channel_val();
        }

        private function appendObjectToConsole(message:Object):void {
            var mess:String;

            mess = JSON.stringify(message)
                    .replace(/\&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/,/g, ", ");

            if (mess && mess.length > 0) {
                appendToConsole(mess, '0x71BDFF');
            }
        }

        private function appendErrorToConsole(message:Object):void {
            appendToConsole(JSON.stringify(message), '0xFF0000');
        }

        private function appendStringToConsole(message:String):void {
            appendToConsole(message, '0x71BDFF');
        }

        private function appendToConsole(message:String, color:String):void {
            try {
                flow = TextFlowUtil.importFromString(
                        (consoleString = "<p><span>" + currentDate() + '</span>: <span color="' + color + '">' +
                                message + "</span></p>\n" + consoleString)
                );
                consoleLog.textFlow = flow;
            }
            catch (error:Error) {
                appendErrorToConsole(error.message);
            }
        }

        private function presenceAppend(message:Object):void {
            try {
                flow = TextFlowUtil.importFromString(
                        (presenceString = "<p><span>" + currentDate() + '</span>: <span color="0xF7B23B">' + JSON.stringify(message) + "</span></p>\n" + presenceString)
                );
                presenceArea.textFlow = flow;
            }
            catch (error:Error) {
                appendErrorToConsole(error.message);
            }
        }

        private function historyAppendText(message:Object):void {
            try {
                flow = TextFlowUtil.importFromString(
                        (historyString = "<p>" + JSON.stringify(message) + "</p>\n")
                );
                historyArea.textFlow = flow;
            }
            catch (error:Error) {
                appendErrorToConsole(error.message);
            }
        }

        private function connected(str:String = ""):void {
            if (str != "") {
                appendStringToConsole(str);
            }

            this.subConnectionStatus.setStyle('backgroundColor', "#45c799");
            labelConnectionStatus.text =  statusConnected;
        }

        private function connecting(str:String = ""):void {
            if (str != "") {
                appendStringToConsole(str);
            }

            this.subConnectionStatus.setStyle('backgroundColor', "#bbbbbb");
            labelConnectionStatus.text = statusConnecting;
        }

        private function disconnected(str:String = ""):void {
            if (str != "") {
                appendStringToConsole(str);
            }

            this.subConnectionStatus.setStyle('backgroundColor', colorRed);
            labelConnectionStatus.text =  statusNotConnected;
        }

        private function getMessagesTextArea():void {
            messagesTextArea.text = JSON.stringify({"text": "hey"});
        }

        private function networkError(str:String):void {
            this.subConnectionStatus.setStyle('backgroundColor', "#FC0000");
            appendStringToConsole(str);
        }

        private function noP(methodName:String):void {
            appendStringToConsole(methodName + '(): instance is not initialized');
        }

        private function currentDate():String {
            var CurrentDateTime:Date = new Date();
            var CurrentDF:DateFormatter = new DateFormatter();
            CurrentDF.formatString = "YYYY/MM/DD LL:NN:SS A";
            var DateTimeString:String = CurrentDF.format(CurrentDateTime);
            return DateTimeString;
        }

        protected function doSubscribe(event:TextOperationEvent):void {
            if (currentChannel && currentChannel.length > 0) {
                unsubscribe();
            }
        }
        ]]>
    </fx:Script>

    <s:VGroup verticalAlign="top" width="792" horizontalAlign="center">

        <s:HGroup width="100%" height="55" verticalAlign="middle">
            <s:Button id="subscribeButton" width="130" height="32" label="SUBSCRIBE"
                      click="subscribe()"  styleName="redButton"/>
            <s:Button id="unsubscribeButton" width="130" height="32" label="UNSUBSCRIBE"
                      click="unsubscribe()"  enabled="false" styleName="redButton"/>
            <s:Button id="btnSSL" height="32" label="SSL"
                      click="sslToggle()" styleName="redButton"/>
            <s:Button id="miscTab" height="32" label="MISC" click="miscToggle()"
                      styleName="redButton"/>
            <s:Button id="presenceTab" height="32" label="PRESENCE" click="presenceToggle()" styleName="redButton"/>
            <s:HGroup width="100%" horizontalAlign="right">

                <s:BorderContainer id="subConnectionStatus" width="100%" height="48"
                                   backgroundColor="{Number(colorRed)}" color="#FEFEFE" cornerRadius="7" borderColor="0xfefefe">
                    <s:Label x="11" y="8" color="#F4F0F0"  text="connection status" styleName="labelTitle"/>
                    <s:Label id="labelConnectionStatus" x="10" y="25" width="275" color="#FEFBFB"
                             paddingBottom="6" styleName="labelText"
                             text="NOT CONNECTED - Press 'Subscribe' Button" textAlign="left"
                             verticalAlign="middle"/>
                </s:BorderContainer>
            </s:HGroup>
        </s:HGroup>

        <s:VGroup width ="100%" horizontalAlign="center" paddingTop="6" paddingBottom="0">
            <s:BorderContainer id="miscContainer" width="100%" backgroundColor="0xeeeeee"
                               borderColor="0xfefefe"  cornerRadius="7" height="40" >
                <s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                    <s:Button  label="Time" click="time()" styleName="redButton"/>
                    <s:Button id="UUID"  label="UUID" click="doUUID()" styleName="redButton"/>
                    <s:Button id="getUUID"  label="GetUUID" click="doGetUUID()"  styleName="redButton" />
                </s:HGroup>
            </s:BorderContainer>
            <s:BorderContainer id="presenceContainer" width="100%" backgroundColor="0xeeeeee" height="185"
                               borderAlpha="1.0" borderColor="0xfefefe" cornerRadius="7"
                               includeInLayout="true">
                <s:Group width="100%" height="165" top="10">
                    <s:VGroup x="10" top="34" bottom="40">
                        <s:HGroup verticalAlign="middle">
                            <s:Label text="key: "/>
                            <s:TextInput id="keyField1" width="77"/>
                            <s:Label text="value: "/>
                            <s:TextInput id="valueField1" width="77"/>
                        </s:HGroup>
                        <s:HGroup verticalAlign="middle">
                            <s:Label text="key: "/>
                            <s:TextInput id="keyField2" width="77"/>
                            <s:Label text="value: "/>
                            <s:TextInput id="valueField2" width="77" chromeColor="#CCCCCC"
                                         contentBackgroundColor="#F4F5A9"/>
                        </s:HGroup>
                        <s:HGroup verticalAlign="middle">
                            <s:Label text="key: "/>
                            <s:TextInput id="keyField3" width="77"/>
                            <s:Label text="value: "/>
                            <s:TextInput id="valueField3" width="77"/>
                        </s:HGroup>
                    </s:VGroup>
                    <s:Button id="presenceStateUpdateButton" label="Update" right="555" top="5" click="stateClickHandler(event)" styleName="redButton"/>
                    <s:Label x="10" y="10" fontWeight="bold" text="State fields:"/>
                    <s:TextInput id="presenceChannelInput" x="382" y="10" width="227" chromeColor="#CCCCCC"
                                 color="#868181" contentBackgroundColor="#F4F5A9" enabled="true"
                                 fontFamily="Arial" prompt="channel" styleName="textInputBase"/>
                    <s:Button id="presenceHereNowButton" x="285" y="42" width="94" label="Here now"
                              click="hereNowHandler()" styleName="redButton"/>

                    <s:CheckBox id="presenceUUIDsCheckbox" x="503" y="43" label="uuids" selected="true"/>
                    <s:CheckBox id="presenceStateCheckbox" x="563" y="43" label="state"
                                selected="true"/>
                    <s:CheckBox id="presenceChannelCheckbox" x="385" y="43" width="113"
                                label="single channel ^" selected="true"/>
                    <s:CheckBox id="presenceBindToSubscribeChannelCheckbox" x="615" y="11"
                                label="Bind to subscribe channel" selected="true"/>
                    <s:Button id="presenceWhereNowButton" x="285" y="88" label="Where Now" click="whereNowHandler()" styleName="redButton"/>
                    <s:TextInput id="presenceUUIDInput" x="385" y="88" width="224" enabled="true"
                                 prompt="uuid"/>
                    <s:Label x="289" y="10" fontWeight="bold" text="Channel:"/>
                    <s:Button id="presenceSetCurrentUUIDButton" x="616" y="88" label="Use current UUID" click="setCurrentUUIDHandler()" styleName="redButton"/>
                    <s:Label x="10" y="122" fontWeight="bold" text="Hearbeat:"/>
                    <s:Label x="384" y="120" fontWeight="bold" text="Hearbeat interval:"/>
                    <s:TextInput id="presenceHeartbeatIntervalInput" x="385" y="139" prompt="in seconds"/>
                    <s:Button id="presenceHeartbeatIntervalGet" x="521" y="139" label="Get" click="getHeartbeatIntervalHandler()" styleName="redButton"/>
                    <s:Button id="presenceHeartbeatIntervalSet" x="600" y="139" label="Set" click="setHeartbeatIntervalHandler()" styleName="redButton"/>
                    <s:TextInput id="presenceHeartbeatInput" x="11" y="139" prompt="in seconds"/>
                    <s:Button id="presenceHeartbeatGet" x="148" y="139" label="Get" click="getHeartbeatHandler()" styleName="redButton"/>
                    <s:Button id="presenceHeartbeatSet" x="227" y="139" label="Set" click="setHeartbeatHandler()" styleName="redButton"/>
                </s:Group>

            </s:BorderContainer>
        </s:VGroup>

        <s:BorderContainer id="bottomContainer" width="100%" height="720"  backgroundColor="0xeeeeee"
                           borderColor="0xfefefe"  cornerRadius="7" bottom="6"  includeInLayout="true">

            <s:VGroup top="15" left="15" right="15" gap="20" width="100%">
                <s:HGroup gap="40" width="100%" >
                    <s:VGroup width="100%">
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label text="channel"/>
                            <s:TextInput id="channelTextInput" width="201" change="channelChangedHandler()"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label text="origin"/>
                            <s:TextInput id="originTextInput" width="201"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label text="auth_key"/>
                            <s:TextInput id="authKeyTextInput"  width="201"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label  text="cipher_key"/>
                            <s:TextInput id="cipherKeyTextInput" width="201"/>
                        </s:HGroup>
                    </s:VGroup>
                    <s:VGroup width="100%" horizontalAlign="right">
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label  text="publish key" textAlign="right"/>
                            <s:TextInput id="publishKeyTextInput"  width="362" textAlign="left"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label  height="15" text="subscribe key" textAlign="right"/>
                            <s:TextInput id="subscribeKeyTextInput"  width="362"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label  text="UUID"/>
                            <s:TextInput id="uuidInput"  width="273" text="flash_client"/>

                            <s:CheckBox id="useDefaultUUIDCheckbox"  label="use default"
                                        selected="false"/>
                        </s:HGroup>
                    </s:VGroup>
                </s:HGroup>
                <s:HGroup width="100%" gap="15">
                    <s:VGroup horizontalAlign="right" height="100%" verticalAlign="bottom" gap="0">
                        <s:TextArea id="messagesTextArea"  width="380" height="70" editable="true"
                                    enabled="true" maxChars="250"/>
                        <s:Button  label="Publish" click="publish()" styleName="redButton"/>
                    </s:VGroup>
                    <s:VGroup width="100%" gap="0">
                        <s:HGroup width="100%" verticalAlign="middle">
                            <s:Label text="presence"/>
                            <s:Spacer width="100%"/>
                            <s:Button id="clearPresence"  height="21" label="Clear" click="clearPresenceHandler()" styleName="redButton"/>
                        </s:HGroup>
                        <s:Scroller  width="365" height="91">
                            <s:RichEditableText id="presenceArea" backgroundColor="#000000" color="#FFFFFF"
                                                editable="false" fontFamily="Arial" fontSize="10"
                                                paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
                                                fontWeight="bold"/>
                        </s:Scroller>
                    </s:VGroup>
                </s:HGroup>
                <s:HGroup width="100%" gap="15">
                    <s:VGroup gap="0">
                        <s:HGroup verticalAlign="middle" width="100%">
                            <s:Label  height="19" text="Messages:"/>
                            <s:Spacer width="100%"/>
                            <s:Button id="clearLog"  height="21" label="Clear" click="clearLogHandler()" styleName="redButton"/>
                        </s:HGroup>
                        <s:Scroller width="380" height="272">
                            <s:RichEditableText id="consoleLog" backgroundColor="#000000" color="#FFFFFF"
                                                editable="false" fontFamily="Arial" fontSize="10"
                                                fontWeight="bold" paddingBottom="10" paddingLeft="10"
                                                paddingRight="10" paddingTop="10" text="&#xd;&#xd;"/>
                        </s:Scroller>
                    </s:VGroup>
                    <s:VGroup gap="0">
                        <s:HGroup verticalAlign="middle" width="100%">
                            <s:Label  text="history"/>
                            <s:Button id="historyButton"  label="History" click="history()" styleName="redButton"/>
                            <s:Spacer width="100%"/>
                            <s:Button id="clearHistory"  height="21" label="Clear" click="clearHistoryHandler()" styleName="redButton"/>

                        </s:HGroup>
                        <s:Scroller  width="363" height="272">
                            <s:RichEditableText id="historyArea" backgroundColor="#000000" color="#FFFFFF"
                                                editable="false" fontFamily="Arial" fontSize="10"
                                                paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
                        </s:Scroller>
                    </s:VGroup>
                </s:HGroup>
                <s:HGroup width="100%" gap="15">
                    <s:VGroup >
                        <s:HGroup gap="10" verticalAlign="middle" width="100%" horizontalAlign="right">
                            <s:Label  text="channel"/>
                            <s:TextInput id="pamChannelTextInput"  width="314"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle"  width="100%" horizontalAlign="right">
                            <s:Label  text="auth_key"/>
                            <s:TextInput id="pamAuthKeyTextInput"  width="314"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle"  width="100%" horizontalAlign="right">
                            <s:Label  text="secret key"/>
                            <s:TextInput id="pamSecretKeyTextInput"  width="314"/>
                        </s:HGroup>
                        <s:HGroup gap="10" verticalAlign="middle"  width="100%" horizontalAlign="right">
                            <s:Label  text="ttl"/>
                            <s:TextInput id="pamTtlTextInput"  width="314"/>
                        </s:HGroup>
                    </s:VGroup>
                    <s:VGroup >
                        <s:CheckBox id="pamReadCheckbox" label="Read ?"/>
                        <s:CheckBox id="pamWriteCheckbox" label="Write ?"/>
                        <s:CheckBox id="pamPnpresCheckbox"  label="apply to *-pnpres channel too" selected="true"/>
                        <s:HGroup height="35" verticalAlign="bottom">
                            <s:Button id="grantButton"  label="Grant" click="grant()" styleName="redButton"/>
                            <s:Button id="revokeButton"  label="Revoke" click="revoke()" styleName="redButton"/>
                            <s:Button id="auditButton"  label="Audit" click="audit()" styleName="redButton"/>

                        </s:HGroup>
                    </s:VGroup>

                </s:HGroup>
            </s:VGroup>

            <s:Label x="553" y="587" fontSize="20" fontWeight="bold" text="PAM - Access Manager"/>

        </s:BorderContainer>

    </s:VGroup>
</s:Application>
